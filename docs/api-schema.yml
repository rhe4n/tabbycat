openapi: 3.0.0
info:
  title: Tabbycat API
  description: Parliamentary debate tabulation software
  termsOfService: 'https://tabbycat.readthedocs.io/en/stable/'
  contact:
    email: ebeaule@tabbycat-debate.org
    name: Étienne Beaulé
  license:
    name: Tabbycat
    url: 'https://tabbycat.readthedocs.io/en/stable/about/licence.html'
  version: 1.2.0
security:
  - Token: []
paths:
  /:
    get:
      operationId: _list
      description: API Root
      security: []
      responses:
        '200':
          description: ''
        '401':
          description: The API has been disabled on this site.
    parameters: []
  /v1:
    get:
      operationId: v1_list
      description: API Version 1 Root
      security: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  _links:
                    title: links
                    type: object
                    readOnly: true
                    properties:
                      v1:
                        title: v1
                        type: string
                        format: uri
                        readOnly: true
                  version:
                    title: Tabbycat version
                    type: string
                    readOnly: true
      tags:
        - v1
    parameters: []
  /v1/institutions:
    get:
      operationId: v1_institutions_list
      description: List all institutions
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
        - name: region
          in: query
          description: Name of the region to include.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Institution'
      tags:
        - v1
        - institutions
    post:
      operationId: v1_institutions_create
      description: Create an institution
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
      tags:
        - v1
        - institutions
      requestBody:
        $ref: '#/components/requestBodies/Institution'
    parameters: []
  '/v1/institutions/{id}':
    get:
      operationId: v1_institutions_read
      description: Retrieve an institution
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
      tags:
        - v1
        - institutions
    post:
      operationId: v1_institutions_update
      description: Modify an institution
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
      tags:
        - v1
        - institutions
      requestBody:
        $ref: '#/components/requestBodies/Institution'
    delete:
      operationId: v1_institutions_delete
      description: Delete an institution
      responses:
        '204':
          description: ''
      tags:
        - v1
        - institutions
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
  /v1/tournaments:
    get:
      operationId: v1_tournaments_list
      description: List all tournaments
      security: []
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
      tags:
        - v1
        - tournaments
    post:
      operationId: v1_tournaments_create
      description: Create a tournament
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
      tags:
        - v1
        - tournaments
      requestBody:
        $ref: '#/components/requestBodies/Tournament'
    parameters: []
  '/v1/tournaments/{tournament_slug}':
    get:
      operationId: v1_tournaments_read
      description: Retrieve a tournament
      security: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
      tags:
        - v1
        - tournaments
    post:
      operationId: v1_tournaments_update
      description: Modify a tournament
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
      tags:
        - v1
        - tournaments
      requestBody:
        $ref: '#/components/requestBodies/Tournament'
    delete:
      operationId: v1_tournaments_delete
      description: Delete a tournament
      responses:
        '204':
          description: ''
      tags:
        - v1
        - tournaments
    patch:
      operationId: v1_tournaments_partial_update
      description: Update a tournament
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
      tags:
        - v1
        - tournaments
      requestBody:
        $ref: '#/components/requestBodies/Tournament'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/adjudicators':
    get:
      operationId: v1_tournaments_adjudicators_list
      description: List adjudicators of a tournament
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
        - name: break
          in: query
          description: >-
            If present, only show breaking adjudicators, if permissions allow.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adjudicator'
      tags:
        - v1
        - adjudicators
    post:
      operationId: v1_tournaments_adjudicators_create
      description: Create an adjudicator for the tournament
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Adjudicator'
      tags:
        - v1
        - adjudicators
      requestBody:
        $ref: '#/components/requestBodies/Adjudicator'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/adjudicators/{id}':
    get:
      operationId: v1_tournaments_adjudicators_read
      description: Retrieve an adjudicator
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Adjudicator'
      tags:
        - v1
        - adjudicators
    post:
      operationId: v1_tournaments_adjudicators_update
      description: Modify an adjudicator
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Adjudicator'
      tags:
        - v1
        - adjudicators
      requestBody:
        $ref: '#/components/requestBodies/Adjudicator'
    delete:
      operationId: v1_tournaments_adjudicators_delete
      description: Delete an adjudicator
      responses:
        '204':
          description: ''
      tags:
        - v1
        - adjudicators
    patch:
      operationId: v1_tournaments_adjudicators_partial_update
      description: Update an adjudicator
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Adjudicator'
      tags:
        - v1
        - adjudicators
      requestBody:
        $ref: '#/components/requestBodies/Adjudicator'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/adjudicators/{id}/checkin':
    get:
      operationId: v1_tournaments_adjudicators_checkin_list
      description: Check if adjudicator is currently checked in
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - adjudicators
        - checkins
    post:
      operationId: v1_tournaments_adjudicators_checkin_create
      description: Create an check-in identifier for the adjudicator
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
      tags:
        - v1
        - adjudicators
        - checkins
    put:
      operationId: v1_tournaments_adjudicators_checkin_update
      description: Check in the adjudicator
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - adjudicators
        - checkins
    patch:
      operationId: v1_tournaments_adjudicators_checkin_partial_update
      description: Toggle the adjudicator''s check-in status
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - adjudicators
        - checkins
    delete:
      operationId: v1_tournaments_adjudicators_checkin_delete
      description: Check out the adjudicator
      responses:
        '204':
          description: ''
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - adjudicators
        - checkins
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/break-categories':
    get:
      operationId: v1_tournaments_break-categories_list
      description: List the tournament''s break categories.
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BreakCategory'
      tags:
        - v1
        - break-categories
    post:
      operationId: v1_tournaments_break-categories_create
      description: Create a break category
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakCategory'
      tags:
        - v1
        - break-categories
      requestBody:
        $ref: '#/components/requestBodies/BreakCategory'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/break-categories/{id}':
    get:
      operationId: v1_tournaments_break-categories_read
      description: Retrieve a break category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakCategory'
      tags:
        - v1
        - break-categories
    post:
      operationId: v1_tournaments_break-categories_update
      description: Modify a break category
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakCategory'
      tags:
        - v1
        - break-categories
      requestBody:
        $ref: '#/components/requestBodies/BreakCategory'
    delete:
      operationId: v1_tournaments_break-categories_delete
      description: Delete a break category
      responses:
        '204':
          description: ''
      tags:
        - v1
        - break-categories
    patch:
      operationId: v1_tournaments_break-categories_partial_update
      description: Update a break category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakCategory'
      tags:
        - v1
        - break-categories
      requestBody:
        $ref: '#/components/requestBodies/BreakCategory'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/break-categories/{id}/eligibility':
    get:
      operationId: v1_tournaments_break-categories_eligibility_read
      description: Get team eligibility for all the break category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakEligibility'
      tags:
        - v1
        - break-categories
        - eligibility
    put:
      operationId: v1_tournaments_break-categories_eligibility_update
      description: Set the teams eligible for the break category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakEligibility'
      tags:
        - v1
        - break-categories
        - eligibility
      requestBody:
        $ref: '#/components/requestBodies/BreakEligibility'
    patch:
      operationId: v1_tournaments_break-categories_eligibility_partial_update
      description: Add eligible teams to the break category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakEligibility'
      tags:
        - v1
        - break-categories
        - eligibility
      requestBody:
        $ref: '#/components/requestBodies/BreakEligibility'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/break-categories/{id}/break':
    get:
      operationId: v1_tournaments_break-categories_break_read
      description: Get team breaks for the break category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BreakingTeam'
      tags:
        - v1
        - break-categories
    post:
      operationId: v1_tournaments_break-categories_break_create
      description: Create a break for a break category
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BreakingTeam'
      tags:
        - v1
        - break-categories
    delete:
      operationId: v1_tournaments_break-categories_break_delete
      description: Delete a break category''s break
      responses:
        '204':
          description: ''
      tags:
        - v1
        - break-categories
    patch:
      operationId: v1_tournaments_break-categories_break_partial_update
      description: Update remark on team and regenerate break
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BreakingTeam'
      tags:
        - v1
        - break-categories
      requestBody:
        $ref: '#/components/requestBodies/PartialBreakingTeam'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/feedback':
    get:
      operationId: v1_tournaments_feedback_list
      description: >-
        List all adjudicator feedback for a tournament.
        Warning: Expensive operation.
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
        - name: source_type
          in: query
          description: The type of participant submitter of the feedback
          required: false
          schema:
            type: string
            enum:
              - adjudicator
              - team
        - name: source
          in: query
          description: >-
            The ID of the participant submitting feedback; must be used in
            conjunction with `source_type`
          required: false
          schema:
            type: integer
        - name: target
          in: query
          description: The ID of the adjudicator receiving feedback
          required: false
          schema:
            type: integer
        - name: round
          in: query
          description: The sequence of the round of the submitted feedback.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedback'
      tags:
        - v1
        - feedback
    post:
      operationId: v1_tournaments_feedback_create
      description: Submit feedback on an adjudicator
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
      tags:
        - v1
        - feedback
      requestBody:
        $ref: '#/components/requestBodies/Feedback'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/feedback-questions':
    get:
      operationId: v1_tournaments_feedback-questions_list
      description: List questions posed in adjudicator feedback
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
        - name: from_adj
          in: query
          description: >-
            Filter to the questions posed to adjudicators. (Determined by
            presence of parameter)
          required: false
          schema:
            type: boolean
        - name: from_team
          in: query
          description: >-
            Filter by whether the question is posed to teams. (Determined by
            presence of parameter)
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedbackQuestion'
      tags:
        - v1
        - questions
    post:
      operationId: v1_tournaments_feedback-questions_create
      description: Create a question for adjudicator feedback
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackQuestion'
      tags:
        - v1
        - questions
      requestBody:
        $ref: '#/components/requestBodies/FeedbackQuestion'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/feedback-questions/{id}':
    get:
      operationId: v1_tournaments_feedback-questions_read
      description: Retrieve a question for adjudicator feedback
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackQuestion'
      tags:
        - v1
        - questions
    post:
      operationId: v1_tournaments_feedback-questions_update
      description: Modify a question for adjuicator feedback
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackQuestion'
      tags:
        - v1
        - questions
      requestBody:
        $ref: '#/components/requestBodies/FeedbackQuestion'
    delete:
      operationId: v1_tournaments_feedback-questions_delete
      description: Delete an adjudicator feedback question including answers
      responses:
        '204':
          description: ''
      tags:
        - v1
        - questions
    patch:
      operationId: v1_tournaments_feedback-questions_partial_update
      description: Update a feedback question
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackQuestion'
      tags:
        - v1
        - questions
      requestBody:
        $ref: '#/components/requestBodies/FeedbackQuestion'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/feedback/{id}':
    get:
      operationId: v1_tournaments_feedback_read
      description: Retrieve submitted feedback
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
      tags:
        - v1
        - feedback
    post:
      operationId: v1_tournaments_feedback_update
      description: >-
        Modify feedback. Only the confirmed and ignored fields can be updated;
        all other fields are ignored.
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
      tags:
        - v1
        - feedback
      requestBody:
        $ref: '#/components/requestBodies/Feedback'
    delete:
      operationId: v1_tournaments_feedback_delete
      description: Delete feedback
      responses:
        '204':
          description: ''
      tags:
        - v1
        - feedback
    patch:
      operationId: v1_tournaments_feedback_partial_update
      description: Update feedback
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
      tags:
        - v1
        - feedback
      requestBody:
        $ref: '#/components/requestBodies/Feedback'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/institutions':
    get:
      operationId: v1_tournaments_institutions_list
      description: >-
        List all institutions with an affiliated participant in the tournament
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
        - name: region
          in: query
          description: Name of the region to include.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TournamentInstitution'
      tags:
        - v1
        - institutions
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/motions':
    get:
      operationId: v1_tournaments_motions_list
      description: List motions of a tournament
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Motion'
      tags:
        - v1
        - motions
    post:
      operationId: v1_tournaments_motions_create
      description: Create a motion
      responses:
        '201':
          description: ''
      tags:
        - v1
        - motions
      requestBody:
        $ref: '#/components/requestBodies/Motion'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/motions/{id}':
    get:
      operationId: v1_tournaments_motions_read
      description: Retrieve a motion
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motion'
      tags:
        - v1
        - motions
    post:
      operationId: v1_tournaments_motions_update
      description: Modify a motion
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motion'
      tags:
        - v1
        - motions
      requestBody:
        $ref: '#/components/requestBodies/Motion'
    delete:
      operationId: v1_tournaments_motions_delete
      description: Delete a motion
      responses:
        '204':
          description: ''
      tags:
        - v1
        - motions
    patch:
      operationId: v1_tournaments_motions_partial_update
      description: Update a motion
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motion'
      tags:
        - v1
        - motions
      requestBody:
        $ref: '#/components/requestBodies/Motion'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/preferences':
    get:
      operationId: v1_tournaments_preferences_list
      description: List tournament preferences
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Preference'
      tags:
        - v1
        - preferences
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/preferences/bulk':
    post:
      operationId: v1_tournaments_preferences_bulk
      summary: Update multiple preferences at once
      description: |-
        this is a long method because we ensure everything is valid
        before actually persisting the changes
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
      tags:
        - v1
        - preferences
      requestBody:
        $ref: '#/components/requestBodies/Preference'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/preferences/{id}':
    get:
      operationId: v1_tournaments_preferences_read
      description: Retrieve specific tournament preference
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
      tags:
        - v1
        - preferences
    put:
      operationId: v1_tournaments_preferences_update
      description: Update a tournament preference
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
      tags:
        - v1
        - preferences
      requestBody:
        $ref: '#/components/requestBodies/Preference'
    patch:
      operationId: v1_tournaments_preferences_partial_update
      description: Partially update tournament preference
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
      tags:
        - v1
        - preferences
      requestBody:
        $ref: '#/components/requestBodies/Preference'
    parameters:
      - name: id
        in: path
        description: >-
          A unique integer value identifying this tournament preference.
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/rounds':
    get:
      operationId: v1_tournaments_rounds_list
      description: List rounds of the tournament
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Round'
      tags:
        - v1
        - rounds
    post:
      operationId: v1_tournaments_rounds_create
      description: Create round in tournament
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Round'
      tags:
        - v1
        - rounds
      requestBody:
        $ref: '#/components/requestBodies/Round'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}':
    get:
      operationId: v1_tournaments_rounds_read
      description: Retrieve a round
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Round'
      tags:
        - v1
        - rounds
    post:
      operationId: v1_tournaments_rounds_update
      description: >-
        Modify a round. Motions are modified by sequence, so their text fields
        can be modified. To move motions, placeholder sequences are needed
        through Motion endpoints, as well as for deleting motions. Motions can
        be appended through this method. An empty field has no effect.
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Round'
      tags:
        - v1
        - rounds
      requestBody:
        $ref: '#/components/requestBodies/Round'
    delete:
      operationId: v1_tournaments_rounds_delete
      description: Delete a round
      responses:
        '204':
          description: ''
      tags:
        - v1
        - rounds
    patch:
      operationId: v1_tournaments_rounds_partial_update
      description: Update a round
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Round'
      tags:
        - v1
        - rounds
      requestBody:
        $ref: '#/components/requestBodies/Round'
    parameters:
      - name: round_seq
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings':
    get:
      operationId: v1_tournaments_rounds_pairings_list
      description: List debates in the round
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Debate'
      tags:
        - v1
        - debates
    post:
      operationId: v1_tournaments_rounds_pairings_create
      description: Create a debate between teams with adjudicators in the round
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Debate'
      tags:
        - v1
        - debates
      requestBody:
        $ref: '#/components/requestBodies/Debate'
    delete:
      operationId : v1_tournaments_rounds_pairings_delete_all
      description: Delete all pairings of the round
      responses:
        '204':
          description: 'All pairings have been deleted'
      tags:
        - v1
        - debates
    parameters:
      - name: round_seq
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings/{debate_pk}':
    get:
      operationId: v1_tournaments_rounds_pairings_read
      description: Retrieve a debate in the round
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Debate'
      tags:
        - v1
        - debates
    post:
      operationId: v1_tournaments_rounds_pairings_update
      description: >-
        Modify a pairing in the round. Teams can be modified, but cannot be
        moved between sides. This method thus cannot be used when confirming
        sides. An empty field has no effect.
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Debate'
      tags:
        - v1
        - debates
      requestBody:
        $ref: '#/components/requestBodies/Debate'
    delete:
      operationId: v1_tournaments_rounds_pairings_delete
      description: Delete a matchup including panel
      responses:
        '204':
          description: ''
      tags:
        - v1
        - debates
    patch:
      operationId: v1_tournaments_rounds_pairings_partial_update
      description: Update a pairing
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Debate'
      tags:
        - v1
        - debates
      requestBody:
        $ref: '#/components/requestBodies/Debate'
    parameters:
      - name: debate_pk
        in: path
        required: true
        schema:
          type: integer
      - name: round_seq
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings/{debate_pk}/ballots':
    get:
      operationId: v1_tournaments_rounds_pairings_ballots_list
      description: Retrieve ballots for a debate
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DebateResult'
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
        - name: confirmed
          in: query
          description: Whether to include unconfirmed ballots
          required: false
          schema:
            type: boolean
      tags:
        - v1
        - results
    post:
      operationId: v1_tournaments_rounds_pairings_ballots_create
      description: Create a result for a debate
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebateResult'
      tags:
        - v1
        - results
      requestBody:
        $ref: '#/components/requestBodies/DebateResult'
    parameters:
      - name: debate_pk
        in: path
        required: true
        schema:
          type: integer
      - name: round_seq
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings/{debate_pk}/ballots/{id}':
    get:
      operationId: v1_tournaments_rounds_pairings_ballots_read
      description: Retrieve a ballot of a debate
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebateResult'
      tags:
        - v1
        - results
    post:
      operationId: v1_tournaments_rounds_pairings_ballots_update
      description: Modify a debate ballot. Cannot re-edit scores.
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebateResult'
      tags:
        - v1
        - results
      requestBody:
        $ref: '#/components/requestBodies/DebateResult'
    delete:
      operationId: v1_tournaments_rounds_pairings_ballots_delete
      description: Delete a ballot of the debate
      responses:
        '204':
          description: ''
      tags:
        - v1
        - results
    patch:
      operationId: v1_tournaments_rounds_pairings_ballots_partial_update
      description: Update a ballot
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebateResult'
      tags:
        - v1
        - results
      requestBody:
        $ref: '#/components/requestBodies/DebateResult'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: debate_pk
        in: path
        required: true
        schema:
          type: integer
      - name: round_seq
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/rounds/{round_seq}/availabilities':
    get:
      operationId: v1_tournaments_rounds_availabilities_list
      description: List all participants marked as available for the round
      parameters:
        - name: adjudicators
          in: query
          description: Whether to list available adjudicators
          required: false
          schema:
            type: boolean
        - name: teams
          in: query
          description: Whether to list available teams
          required: false
          schema:
            type: boolean
        - name: venues
          in: query
          description: Whether to list available rooms
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  title: Participant
                  type: string
                  format: uri
      tags:
        - v1
        - availabilities
    post:
      operationId: v1_tournaments_rounds_availabilities_post
      description: Marks participants as unavailable for a round
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  title: Participant
                  type: string
                  format: uri
      tags:
        - v1
        - availabilities
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                title: Participant
                type: string
                format: uri
    put:
      operationId: v1_tournaments_rounds_availabilities_put
      description: Marks participants as available for a round
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  title: Participant
                  type: string
                  format: uri
      tags:
        - v1
        - availabilities
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                title: Participant
                type: string
                format: uri
    patch:
      operationId: v1_tournaments_rounds_availabilities_patch
      description: Toggles participants' availabilities for a round
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  title: Participant
                  type: string
                  format: uri
      tags:
        - v1
        - availabilities
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                title: Participant
                type: string
                format: uri
    delete:
      operationId: v1_tournaments_rounds_availabilities_delete
      description: >-
        Marks all participants of specified type as unavailable for the round
      parameters:
        - name: adjudicators
          in: query
          description: Whether to unmark available adjudicators
          required: false
          schema:
            type: boolean
        - name: teams
          in: query
          description: Whether to unmark available teams
          required: false
          schema:
            type: boolean
        - name: venues
          in: query
          description: Whether to unmark available rooms
          required: false
          schema:
            type: boolean
      responses:
        '204':
          description: ''
      tags:
        - v1
        - availabilities
    parameters:
      - name: round_seq
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/speaker-categories':
    get:
      operationId: v1_tournaments_speaker-categories_list
      description: List all speaker categories of the tournament
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpeakerCategory'
      tags:
        - v1
        - speaker-categories
    post:
      operationId: v1_tournaments_speaker-categories_create
      description: Create a speaker category
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerCategory'
      tags:
        - v1
        - speaker-categories
      requestBody:
        $ref: '#/components/requestBodies/SpeakerCategory'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/speaker-categories/{id}':
    get:
      operationId: v1_tournaments_speaker-categories_read
      description: Retrieve a speaker category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerCategory'
      tags:
        - v1
        - speaker-categories
    post:
      operationId: v1_tournaments_speaker-categories_update
      description: Modify a speaker category
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerCategory'
      tags:
        - v1
        - speaker-categories
      requestBody:
        $ref: '#/components/requestBodies/SpeakerCategory'
    delete:
      operationId: v1_tournaments_speaker-categories_delete
      description: Delete a speaker category with eligibilities
      responses:
        '204':
          description: ''
      tags:
        - v1
        - speaker-categories
    patch:
      operationId: v1_tournaments_speaker-categories_partial_update
      description: Update a speaker category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerCategory'
      tags:
        - v1
        - speaker-categories
      requestBody:
        $ref: '#/components/requestBodies/SpeakerCategory'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/speaker-categories/{id}/eligibility':
    get:
      operationId: v1_tournaments_speaker-categories_eligibility_read
      description: List speakers included in the category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerEligibility'
      tags:
        - v1
        - speaker-categories
        - eligibility
    put:
      operationId: v1_tournaments_speaker-categories_eligibility_update
      description: Set eligible speakers of the category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerEligibility'
      tags:
        - v1
        - speaker-categories
        - eligibility
      requestBody:
        $ref: '#/components/requestBodies/SpeakerEligibility'
    patch:
      operationId: v1_tournaments_speaker-categories_eligibility_partial_update
      description: Add speakers to the category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerEligibility'
      tags:
        - v1
        - speaker-categories
        - eligibility
      requestBody:
        $ref: '#/components/requestBodies/SpeakerEligibility'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/speakers':
    get:
      operationId: v1_tournaments_speakers_list
      description: List speakers of tournament teams
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Speaker'
      tags:
        - v1
        - speakers
    post:
      operationId: v1_tournaments_speakers_create
      description: Create new speaker to team
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Speaker'
      tags:
        - v1
        - speakers
      requestBody:
        $ref: '#/components/requestBodies/Speaker'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/speakers/standings':
    get:
      operationId: v1_tournaments_speakers_standings_list
      description: Get speaker standings in the tournament
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
        - name: category
          in: query
          description: Restrict the standings to a speaker category
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeakerStandings'
      tags:
        - v1
        - speakers
        - standings
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/speakers/{id}':
    get:
      operationId: v1_tournaments_speakers_read
      description: Retrieve a speaker
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Speaker'
      tags:
        - v1
        - speakers
    post:
      operationId: v1_tournaments_speakers_update
      description: Modify a speaker
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Speaker'
      tags:
        - v1
        - speakers
      requestBody:
        $ref: '#/components/requestBodies/Speaker'
    delete:
      operationId: v1_tournaments_speakers_delete
      description: Delete a speaker
      responses:
        '204':
          description: ''
      tags:
        - v1
        - speakers
    patch:
      operationId: v1_tournaments_speakers_partial_update
      description: Update a speaker
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Speaker'
      tags:
        - v1
        - speakers
      requestBody:
        $ref: '#/components/requestBodies/Speaker'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/speakers/{id}/checkin':
    get:
      operationId: v1_tournaments_speakers_checkin_list
      description: Check if speaker is currently checked in
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - speakers
        - checkins
    post:
      operationId: v1_tournaments_speakers_checkin_create
      description: Create an check-in identifier for the speaker
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
      tags:
        - v1
        - speakers
        - checkins
    put:
      operationId: v1_tournaments_speakers_checkin_update
      description: Check in the speaker
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - speakers
        - checkins
    patch:
      operationId: v1_tournaments_speakers_checkin_partial_update
      description: Toggle the speaker''s check-in status
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - speakers
        - checkins
    delete:
      operationId: v1_tournaments_speakers_checkin_delete
      description: Check out the speaker
      responses:
        '204':
          description: ''
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - speakers
        - checkins
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/teams':
    get:
      operationId: v1_tournaments_teams_list
      description: List teams in the tournament
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
      tags:
        - v1
        - teams
    post:
      operationId: v1_tournaments_teams_create
      description: Create team in the tournament
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
      tags:
        - v1
        - teams
      requestBody:
        $ref: '#/components/requestBodies/Team'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/teams/standings':
    get:
      operationId: v1_tournaments_teams_standings_list
      description: Get the team standings
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
        - name: category
          in: query
          description: Restrict the standings to a break category
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamStandings'
      tags:
        - v1
        - teams
        - standings
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/teams/{id}':
    get:
      operationId: v1_tournaments_teams_read
      description: Retrieve a team
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
      tags:
        - v1
        - teams
    post:
      operationId: v1_tournaments_teams_update
      description: >-
        Modify a team. The speakers field can only create speakers, not
        modify or remove them. Leave empty if none are being added.
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
      tags:
        - v1
        - teams
      requestBody:
        $ref: '#/components/requestBodies/Team'
    delete:
      operationId: v1_tournaments_teams_delete
      description: Delete a team
      responses:
        '204':
          description: ''
      tags:
        - v1
        - teams
    patch:
      operationId: v1_tournaments_team_partial_update
      description: Update a team
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
      tags:
        - v1
        - teams
      requestBody:
        $ref: '#/components/requestBodies/Team'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/venue-categories':
    get:
      operationId: v1_tournaments_venue-categories_list
      description: List venue categories
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VenueCategory'
      tags:
        - v1
        - venue-categories
    post:
      operationId: v1_tournaments_venue-categories_create
      description: Create a venue category
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueCategory'
      tags:
        - v1
        - venue-categories
      requestBody:
        $ref: '#/components/requestBodies/VenueCategory'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/venue-categories/{id}':
    get:
      operationId: v1_tournaments_venue-categories_read
      description: Retrieve venue category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueCategory'
      tags:
        - v1
        - venue-categories
    post:
      operationId: v1_tournaments_venue-categories_update
      description: Modify a venue category
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueCategory'
      tags:
        - v1
        - venue-categories
      requestBody:
        $ref: '#/components/requestBodies/VenueCategory'
    delete:
      operationId: v1_tournaments_venue-categories_delete
      description: Delete a venue category
      responses:
        '204':
          description: ''
      tags:
        - v1
        - venue-categories
    patch:
      operationId: v1_tournaments_venue-categories_partial_update
      description: Update a venue category
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueCategory'
      tags:
        - v1
        - venue-categories
      requestBody:
        $ref: '#/components/requestBodies/VenueCategory'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/venues':
    get:
      operationId: v1_tournaments_venues_list
      description: List venues added for the tournament
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The initial index from which to return the results.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Venue'
      tags:
        - v1
        - venues
    post:
      operationId: v1_tournaments_venues_create
      description: Add a venue to the tournament
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
      tags:
        - v1
        - venues
      requestBody:
        $ref: '#/components/requestBodies/Venue'
    parameters:
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/venues/{id}':
    get:
      operationId: v1_tournaments_venues_read
      description: Retrieve a venue
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
      tags:
        - v1
        - venues
    post:
      operationId: v1_tournaments_venues_update
      description: Modify a venue
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
      tags:
        - v1
        - venues
      requestBody:
        $ref: '#/components/requestBodies/Venue'
    delete:
      operationId: v1_tournaments_venues_delete
      description: Delete a venue
      responses:
        '204':
          description: ''
      tags:
        - v1
        - venues
    patch:
      operationId: v1_tournaments_venues_partial_update
      description: Update a venue
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
      tags:
        - v1
        - venues
      requestBody:
        $ref: '#/components/requestBodies/Venue'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
  '/v1/tournaments/{tournament_slug}/venues/{id}/checkin':
    get:
      operationId: v1_tournaments_venues_checkin_list
      description: Check if venue is currently checked in
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - venues
        - checkins
    post:
      operationId: v1_tournaments_venues_checkin_create
      description: Create an check-in identifier for the venue
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
      tags:
        - v1
        - venues
        - checkins
    put:
      operationId: v1_tournaments_venues_checkin_update
      description: Check in the venue
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - venues
        - checkins
    patch:
      operationId: v1_tournaments_venues_checkin_partial_update
      description: Toggle the venue''s check-in status
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkin'
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - venues
        - checkins
    delete:
      operationId: v1_tournaments_venues_checkin_delete
      description: Check out the venue
      responses:
        '204':
          description: ''
        '404':
          description: 'No identifier. Use POST to generate.'
      tags:
        - v1
        - venues
        - checkins
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: tournament_slug
        in: path
        required: true
        schema:
          type: string
servers:
  - url: 'http://localhost:8000/api'
components:
  requestBodies:
    TournamentInstitution:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TournamentInstitution'
      required: true
    Venue:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Venue'
      required: true
    FeedbackQuestion:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FeedbackQuestion'
      required: true
    Preference:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Preference'
      required: true
    Motion:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Motion'
      required: true
    SpeakerEligibility:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SpeakerEligibility'
      required: true
    Feedback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Feedback'
      required: true
    VenueCategory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VenueCategory'
      required: true
    Institution:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Institution'
      required: true
    Tournament:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tournament'
      required: true
    Adjudicator:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Adjudicator'
      required: true
    BreakCategory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BreakCategory'
      required: true
    BreakEligibility:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BreakEligibility'
      required: true
    Round:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Round'
      required: true
    Debate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Debate'
      required: true
    SpeakerCategory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SpeakerCategory'
      required: true
    Speaker:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Speaker'
      required: true
    Team:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Team'
      required: true
    DebateResult:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DebateResult'
      required: true
    PartialBreakingTeam:
      content:
        application/json:
          schema:
            required:
              - team
            type: object
            properties:
              team:
                title: Team
                type: string
                format: uri
              remark:
                title: Remark
                type: string
                nullable: true
                enum:
                  - C
                  - I
                  - D
                  - d
                  - t
                  - w
                  - null
  securitySchemes:
    Token:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    VenueConstraint:
      required:
        - category
        - priority
      type: object
      properties:
        category:
          title: Category
          description: The venue category to constrain to
          type: string
          format: uri
        priority:
          title: Priority
          description: How important is the constraint
          type: integer
    Institution:
      required:
        - name
        - code
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        name:
          title: Name
          description: >-
            The institution's full name, e.g., "University of Cambridge",
            "Victoria University of Wellington"
          type: string
          maxLength: 100
          minLength: 1
        code:
          title: Code
          description: >-
            What the institution is typically called for short, e.g.,
            "Cambridge", "Vic Wellington"
          type: string
          maxLength: 20
          minLength: 1
        region:
          title: Region
          type: string
          maxLength: 100
          nullable: true
        venue_constraints:
          type: array
          items:
            $ref: '#/components/schemas/VenueConstraint'
    TournamentInstitution:
      required:
        - name
        - code
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        name:
          title: Name
          description: >-
            The institution's full name, e.g., "University of Cambridge",
            "Victoria University of Wellington"
          type: string
          maxLength: 100
          minLength: 1
        code:
          title: Code
          description: >-
            What the institution is typically called for short, e.g.,
            "Cambridge", "Vic Wellington"
          type: string
          maxLength: 20
          minLength: 1
        region:
          title: Region
          type: string
          maxLength: 100
          nullable: true
        teams:
          title: Teams
          type: array
          items:
            type: string
            format: uri
        adjudicators:
          title: Adjudicators
          type: array
          items:
            type: string
            format: uri
        venue_constraints:
          type: array
          items:
            $ref: '#/components/schemas/VenueConstraint'
    Tournament:
      required:
        - name
        - slug
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        current_rounds:
          type: array
          items:
            type: string
            format: uri
          readOnly: true
          uniqueItems: true
        _links:
          title: links
          type: object
          readOnly: true
          properties:
            rounds:
              title: Rounds
              type: string
              format: uri
              readOnly: true
            break_categories:
              title: Break categories
              type: string
              format: uri
              readOnly: true
            speaker_categories:
              title: Speaker categories
              type: string
              format: uri
              readOnly: true
            institutions:
              title: Institutions
              type: string
              format: uri
              readOnly: true
            teams:
              title: Teams
              type: string
              format: uri
              readOnly: true
            adjudicators:
              title: Adjudicators
              type: string
              format: uri
              readOnly: true
            speakers:
              title: Speakers
              type: string
              format: uri
              readOnly: true
            venues:
              title: Venues
              type: string
              format: uri
              readOnly: true
            venue_categories:
              title: Venue categories
              type: string
              format: uri
              readOnly: true
            motions:
              title: Motions
              type: string
              format: uri
              readOnly: true
            feedback:
              title: Feedback
              type: string
              format: uri
              readOnly: true
            feedback_questions:
              title: Feedback questions
              type: string
              format: uri
              readOnly: true
            preferences:
              title: Preferences
              type: string
              format: uri
              readOnly: true
        name:
          title: Name
          description: >-
            The full name, e.g. "Australasian Intervarsity Debating
            Championships 2016"
          type: string
          maxLength: 100
          minLength: 1
        short_name:
          title: Short name
          description: 'The name used in the menu, e.g. "Australs 2016"'
          type: string
          maxLength: 25
        seq:
          title: Sequence number
          description: >-
            A number that determines the relative order in which tournaments
            are displayed on the homepage.
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        slug:
          title: Slug
          description: >-
            The sub-URL of the tournament, cannot have spaces, e.g.
            "australs2016"
          type: string
          format: slug
          pattern: '^[-a-zA-Z0-9_]+$'
          maxLength: 50
          minLength: 1
        active:
          title: Active
          type: boolean
    Preference:
      required:
        - value
      type: object
      properties:
        section:
          title: Section
          type: string
          readOnly: true
          minLength: 1
        name:
          title: Name
          type: string
          readOnly: true
          minLength: 1
        identifier:
          title: Identifier
          type: string
          readOnly: true
        default:
          title: Default
          type: string
          readOnly: true
        value:
          title: Value
          type: string
        verbose_name:
          title: Verbose name
          type: string
          readOnly: true
        help_text:
          title: Help text
          type: string
          readOnly: true
        additional_data:
          title: Additional data
          type: string
          readOnly: true
        field:
          title: Field
          type: string
          readOnly: true
    Checkin:
      type: object
      properties:
        object:
          title: object
          type: string
          format: uri
          readOnly: true
        barcode:
          title: barcode
          type: integer
          pattern: '^[1-9]\d*$'
          readOnly: true
          nullable: true
        checked:
          title: Checked
          type: boolean
          readOnly: true
        timestamp:
          title: Timestamp
          type: string
          format: date-time
          readOnly: true
          nullable: true
    Adjudicator:
      required:
        - name
        - institution
        - institution_conflicts
        - team_conflicts
        - adjudicator_conflicts
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        name:
          title: Name
          type: string
          maxLength: 70
        gender:
          title: Gender
          description: >-
            Gender is displayed in the adjudicator allocation interface, and
            nowhere else
          enum:
            - M
            - F
            - O
        email:
          title: E-mail address
          type: string
          format: email
          maxLength: 254
          nullable: true
        phone:
          title: Phone
          type: string
          maxLength: 40
        anonymous:
          title: Anonymous
          description: >-
            Anonymous persons will have their name and team redacted on public
            tab releases
          type: boolean
        pronoun:
          title: Pronoun
          description: >-
            If printing ballots using Tabbycat, there is the option to
            pre-print pronouns
          type: string
          maxLength: 10
        institution:
          title: Institution
          type: string
          format: uri
          nullable: true
        base_score:
          title: Base score
          type: number
          format: float
        breaking:
          title: Breaking
          type: boolean
        trainee:
          title: Always trainee
          description: >-
            If checked, this adjudicator will never be auto-allocated a voting
            position, regardless of their score
          type: boolean
        independent:
          title: Independent
          type: boolean
        adj_core:
          title: Adjudication core
          type: boolean
        institution_conflicts:
          title: Institution conflicts
          type: array
          items:
            type: string
            format: uri
        team_conflicts:
          title: Team conflicts
          type: array
          items:
            type: string
            format: uri
        adjudicator_conflicts:
          title: Adjudicator conflicts
          type: array
          items:
            type: string
            format: uri
        url_key:
          title: URL Key
          description: >-
            Set null to automatically generate; set as empty string to have no URL key.
          type: string
          format: slug
          pattern: '^[-a-zA-Z0-9_]+$'
          maxLength: 24
          nullable: true
        _links:
          title: links
          type: object
          readOnly: true
          properties:
            checkin:
              title: Checkins
              type: string
              format: uri
              readOnly: true
        venue_constraints:
          type: array
          items:
            $ref: '#/components/schemas/VenueConstraint'
    BreakCategory:
      required:
        - name
        - slug
        - seq
        - break_size
        - is_general
        - priority
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        name:
          title: Name
          description: 'Name to be displayed, e.g., "ESL"'
          type: string
          maxLength: 50
        slug:
          title: Slug
          description: 'Slug for URLs, e.g., "esl"'
          type: string
          format: slug
        seq:
          title: Sequence number
          description: The order in which the categories are displayed
          type: integer
        break_size:
          title: Break size
          description: Number of breaking teams in this category
          type: integer
          minimum: 2
        is_general:
          title: Is general
          description: >-
            True if most teams eligible for this category, e.g. Open, False
            otherwise
          type: boolean
        priority:
          title: Priority
          description: >-
            If a team breaks in multiple categories, higher priority numbers
            take precedence; teams can break into multiple categories if and
            only if they all have the same priority
          type: integer
        limit:
          title: Limit
          description: >-
            At most this many teams will be shown on the public tab for this
            category, or use 0 for no limit
          type: integer
        rule:
          title: Rule
          description: >-
            Rule for how the break is calculated (most tournaments should use
            "Standard")
          type: string
          enum:
            - standard
            - aida-1996
            - aida-2016-easters
            - aida-2016-australs
            - aida-2019-australs-open
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        _links:
          title: links
          type: object
          readOnly: true
          properties:
            eligibility:
              title: Eligibility
              type: string
              format: uri
              readOnly: true
    SpeakerCategory:
      required:
        - name
        - slug
        - seq
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        name:
          title: Name
          description: 'Name to be displayed, e.g., "ESL"'
          type: string
          maxLength: 50
        slug:
          title: Slug
          description: 'Slug for URLs, e.g., "esl"'
          type: string
          format: slug
        seq:
          title: Sequence number
          description: The order in which the categories are displayed
          type: integer
        limit:
          title: Limit
          description: >-
            At most this many speakers will be shown on the public tab for this
            category, or use 0 for no limit
          type: integer
        public:
          title: Public
          description: >-
            If checked, this category will be included in the speaker category
            tabs shown to the public
          type: boolean
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        _links:
          title: links
          type: object
          readOnly: true
          properties:
            eligibility:
              title: Eligibility
              type: string
              format: uri
              readOnly: true
    BreakEligibility:
      required:
        - team_set
      type: object
      properties:
        slug:
          title: Slug
          description: 'Slug for URLs, e.g., "esl"'
          type: string
          format: slug
          readOnly: true
        team_set:
          title: Team set
          type: array
          items:
            type: string
            format: uri
    SpeakerEligibility:
      required:
        - speaker_set
      type: object
      properties:
        slug:
          title: Slug
          description: 'Slug for URLs, e.g., "esl"'
          type: string
          format: slug
          readOnly: true
        speaker_set:
          title: Speaker set
          type: array
          items:
            type: string
            format: uri
    Feedback:
      required:
        - adjudicator
        - source
        - debate
        - score
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        adjudicator:
          title: Adjudicator
          type: string
          format: uri
        source:
          title: Source
          description: The adjudicator or team submitting this feedback
          type: string
          format: uri
        debate:
          title: Debate
          description: The debate for which this feedback originates
          type: string
          format: uri
        answers:
          title: Answers
          type: array
          items:
            type: object
            required:
              - question
              - answer
            properties:
              question:
                title: question
                type: string
                format: uri
              answer:
                title: Answer
                type: string
        timestamp:
          type: string
          format: date-time
          title: Timestamp
        version:
          title: Version
          type: integer
          readOnly: true
        submitter_type:
          title: Submitter type
          type: string
          enum:
            - T
            - P
          readOnly: true
        confirmed:
          title: Confirmed
          type: boolean
        confirm_timestamp:
          title: Confirm timestamp
          type: string
          format: date-time
          readOnly: true
          nullable: true
        ip_address:
          title: IP address
          type: string
          format: ipv4
          readOnly: true
        score:
          title: Score
          type: number
          format: float
        ignored:
          title: Ignored
          description: Whether the feedback should affect the judge's score
          type: boolean
        participant_submitter:
          title: Participant submitter
          description: The submitting participant, adjudicator or speaker
          type: string
          format: uri
          nullable: true
          readOnly: true
        private_url:
          title: Private URL
          description: >-
            Whether the feedback was submitted through the participant's
            private URL.
          type: boolean
          readOnly: true
        submitter:
          title: Submitter
          type: integer
          nullable: true
          readOnly: true
        confirmer:
          title: Confirmer
          type: integer
          nullable: true
          readOnly: true
    FeedbackQuestion:
      required:
        - choices
        - seq
        - text
        - name
        - reference
        - from_adj
        - from_team
        - answer_type
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        choices:
          title: Choices
          type: array
          items:
            type: string
        seq:
          title: Sequence number
          description: The order in which questions are displayed
          type: integer
        text:
          title: Text
          description: >-
            The question displayed to participants, e.g., "Did you agree with
            the decision?"
          type: string
          maxLength: 255
        name:
          title: Name
          description: >-
            'A short name for the question, e.g., "Agree with decision"'
          type: string
          maxLength: 30
        reference:
          title: Reference
          description: 'Code-compatible reference, e.g., "agree_with_decision"'
          type: string
          maxLength: 50
        from_adj:
          title: From adjudicator
          description: >-
            Adjudicators should be asked this question (about other
            adjudicators)
          type: boolean
        from_team:
          title: From team
          description: Teams should be asked this question
          type: boolean
        answer_type:
          title: Answer type
          type: string
          enum:
            - bc
            - bs
            - i
            - is
            - f
            - t
            - tl
            - ss
            - ms
        required:
          title: Required
          description: Whether participants are required to fill out this field
          type: boolean
        min_value:
          title: Minimum value
          description: >-
            Minimum allowed value for numeric fields (ignored for text or
            boolean fields)
          nullable: true
        max_value:
          title: Maximum value
          description: >-
            Maximum allowed value for numeric fields (ignored for text or
            boolean fields)
          nullable: true
    Motion:
      required:
        - rounds
        - text
        - reference
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        rounds:
          title: Rounds
          type: array
          items:
            type: object
            required:
              - round
            properties:
              round:
                title: Round
                type: string
                format: uri
              seq:
                title: Sequence number
                description: The order in which motions are displayed
                type: integer
        text:
          title: Text
          description: >-
            'The full motion e.g., "This House would straighten all bananas"'
          type: string
          maxLength: 500
        reference:
          title: Reference
          description: 'Shortcode for the motion, e.g., "Bananas"'
          maxLength: 100
        info_slide:
          title: Info slide
          description: The information slide for this topic; if it has one
    Round:
      required:
        - break_category
        - motions
        - seq
        - name
        - abbreviation
        - draw_type
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        break_category:
          title: Break category
          type: string
          format: uri
          nullable: true
        motions:
          title: Motions
          type: array
          items:
            type: object
            required:
              - text
              - reference
            properties:
              id:
                title: ID
                type: integer
                readOnly: true
              url:
                title: Url
                type: string
                format: uri
                readOnly: true
              seq:
                title: Sequence number
                description: The order in which motions are displayed
                type: integer
              text:
                title: Text
                description: >-
                  The full motion e.g., "This House would straighten all
                  bananas"
                type: string
                maxLength: 500
              reference:
                title: Reference
                description: 'Shortcode for the motion, e.g., "Bananas"'
                maxLength: 100
              info_slide:
                title: Info slide
                description: >-
                  The information slide for this topic; if it has one
        _links:
          title: links
          readOnly: true
          type: object
          properties:
            pairing:
              title: Pairing
              type: string
              format: uri
              readOnly: true
        seq:
          title: Sequence number
          description: >-
            A number that determines the order of the round, should count
            consecutively from 1 for the first round
          type: integer
        completed:
          title: completed
          description: >-
            True if the round is over, which normally means all results have
            been entered and confirmed
          type: boolean
        name:
          title: Name
          description: e.g. "Round 1"
          type: string
          maxLength: 40
        abbreviation:
          title: Abbreviation
          description: e.g. "R1"
          type: string
          maxLength: 10
        stage:
          title: stage
          description: 'Preliminary = inrounds, elimination = outrounds'
          type: string
          enum:
            - P
            - E
        draw_type:
          title: Draw type
          description: Which draw method to use
          type: string
          enum:
            - R
            - M
            - D
            - P
            - E
        draw_status:
          title: Draw status
          description: The status of this round's draw
          type: string
          enum:
            - 'N'
            - D
            - C
            - R
        feedback_weight:
          title: Feedback weight
          description: >-
            The extent to which each adjudicator's overall score depends on
            feedback vs their base score. At 0, it is 100% drawn from their
            base score, at 1 it is 100% drawn from feedback.
          type: number
          format: float
        silent:
          title: Silent
          description: >-
            If marked silent, information about this round (such as its
            results) will not be shown publicly.
          type: boolean
        motions_released:
          title: Motions released
          description: >-
            Whether motions will appear on the public website, assuming that
            feature is turned on
          type: boolean
        starts_at:
          title: Starts at
          type: string
          format: time
        weight:
          title: Weight
          description: >-
            A factor for the points received in the round. For example, if 2,
            all points are doubled.
          type: integer
    Debate:
      required:
        - teams
      type: object
      properties:
        url:
          title: Url
          readOnly: true
          type: string
          format: uri
        id:
          title: ID
          readOnly: true
          type: integer
        venue:
          title: Venue
          type: string
          format: uri
          nullable: true
        teams:
          title: Teams
          type: array
          items:
            required:
              - team
              - side
            type: object
            properties:
              team:
                title: Team
                type: string
                format: uri
              side:
                title: Side
                type: string
                enum:
                  - aff
                  - neg
                  - og
                  - oo
                  - cg
                  - co
        adjudicators:
          title: Adjudicators
          type: object
          nullable: true
          required:
            - chair
            - panellists
            - trainees
          properties:
            chair:
              title: Chair
              type: string
              format: uri
              nullable: true
            panellists:
              title: Panellists
              type: array
              items:
                type: string
                format: uri
            trainees:
              title: Trainees
              type: array
              items:
                type: string
                format: uri
        bracket:
          title: Bracket
          type: number
        room_rank:
          title: room rank
          type: integer
        importance:
          title: importance
          type: integer
        result_status:
          title: result status
          type: string
          enum:
            - N
            - P
            - D
            - C
        sides_confirmed:
          title: Sides confirmed
          description: >-
            If unchecked, the sides assigned to teams in this debate are just
            placeholders.
          type: boolean
    Speaker:
      required:
        - name
        - categories
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        name:
          title: Name
          type: string
          maxLength: 70
        gender:
          title: Gender
          description: >-
            Gender is displayed in the adjudicator allocation interface, and
            nowhere else
          enum:
            - M
            - F
            - O
        email:
          title: E-mail address
          type: string
          format: email
          maxLength: 254
          nullable: true
        phone:
          title: Phone
          type: string
          maxLength: 40
        anonymous:
          title: Anonymous
          description: >-
            Anonymous persons will have their name and team redacted on public
            tab releases
          type: boolean
        pronoun:
          title: Pronoun
          description: >-
            If printing ballots using Tabbycat, there is the option to pre-print
            pronouns
          type: string
          maxLength: 10
        categories:
          title: Categories
          type: array
          items:
            type: string
            format: uri
        url_key:
          title: URL Key
          description: >-
            Set null to automatically generate; set as empty string to have no URL key.
          type: string
          format: slug
          pattern: '^[-a-zA-Z0-9_]+$'
          maxLength: 24
          nullable: true
        _links:
          title: links
          type: object
          readOnly: true
          properties:
            checkin:
              title: Checkins
              type: string
              format: uri
              readOnly: true
    Team:
      type: object
      required:
        - institution
        - break_categories
        - institution_conflicts
      properties:
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        id:
          title: ID
          type: integer
          readOnly: true
        reference:
          title: Full name/suffix
          description: >-
            Do not include institution name (see "uses institutional prefix"
            below)
          type: string
          maxLength: 150
        short_reference:
          title: Short name/suffix
          description: >-
            The decoded name shown in the draw, not including institution name
            (see "uses institutional prefix" below)
          type: string
          maxLength: 35
        code_name:
          title: Code name
          description: >-
            Name used to obscure institutional identity on public-facing pages
          type: string
          maxLength: 150
        emoji:
          title: Emoji
          type: string
          maxLength: 2
          nullable: true
        short_name:
          title: Short name
          description: >-
            The decoded name shown in the draw, including institution name. This
            is autogenerated.
          type: string
          readOnly: true
        long_name:
          title: Long name
          description: >-
            The full name of the team, including institution name. This is
            autogenerated.
          type: string
          readOnly: true
        institution:
          title: Institution
          type: string
          format: uri
          nullable: true
        speakers:
          title: Speakers
          type: array
          items:
            $ref: '#/components/schemas/Speaker'
        use_institution_prefix:
          title: Uses institutional prefix
          description: >-
            If ticked, a team called "1" from Victoria will be shown as
            "Victoria 1"
          type: boolean
        break_categories:
          title: Break categories
          type: array
          items:
            type: string
            format: uri
        institution_conflicts:
          title: Institution conflicts
          type: array
          items:
            type: string
            format: uri
        venue_constraints:
          type: array
          items:
            $ref: '#/components/schemas/VenueConstraint'
    SpeakerStandings:
      type: array
      items:
        type: object
        properties:
          rank:
            title: Rank
            type: integer
          tied:
            title: Tied
            type: boolean
          metrics:
            title: Metrics
            type: array
            items:
              type: object
              properties:
                metric:
                  title: Metric
                  type: string
                  enum:
                    - total
                    - average
                    - trimmed_mean
                    - team_points
                    - stdev
                    - count
                    - replies_sum
                    - replies_avg
                    - replies_stddev
                    - replies_count
                value:
                  title: Value
                  type: number
          speaker:
            title: Speaker
            type: string
            format: uri
    TeamStandings:
      type: array
      items:
        type: object
        properties:
          rank:
            title: Rank
            type: integer
          tied:
            title: Tied
            type: boolean
          metrics:
            title: Metrics
            type: array
            items:
              type: object
              properties:
                metric:
                  title: Metric
                  type: string
                  enum:
                    - points
                    - wins
                    - speaks_sum
                    - speaks_avg
                    - speaks_ind_avg
                    - speaks_stddev
                    - draw_strength
                    - draw_strength_speaks
                    - margin_sum
                    - margin_avg
                    - npullups
                    - num_adjs
                    - firsts
                    - seconds
                    - wbw
                value:
                  title: Value
                  type: number
          team:
            title: Team
            type: string
            format: uri
    Venue:
      required:
        - categories
        - name
        - priority
      type: object
      properties:
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        id:
          title: ID
          type: integer
          readOnly: true
        categories:
          title: Categories
          type: array
          items:
            type: string
            format: uri
        display_name:
          title: Display name
          type: string
          readOnly: true
        _links:
          title: links
          type: object
          readOnly: true
          properties:
            checkin:
              title: Checkins
              type: string
              format: uri
              readOnly: true
        name:
          title: Name
          type: string
          format: uri
          maxLength: 40
        priority:
          title: Priority
          description: >-
            Venues with a higher priority number will be preferred when
            allocating venues to debates
          type: integer
        external_url:
          title: External URL
          type: string
          format: uri
          nullable: true
    VenueCategory:
      required:
        - venues
        - name
      type: object
      properties:
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        id:
          title: ID
          type: integer
          readOnly: true
        venues:
          title: Venues
          type: array
          items:
            type: string
            format: uri
        name:
          title: Name
          description: >-
            Name of category, e.g., "Purple", "Step-free access", "Close to tab
            room". This name is shown when the category is prefixed or suffixed
            to a venue name in the draw, e.g., "Purple – G05".
          type: string
          maxLength: 80
        description:
          title: Description
          description: >-
            Description, as the predicate of a sentence, e.g. "has step-free
            access", "is close to the briefing hall". This description follows
            "This venue" when shown in tooltips, e.g., "This venue is close to
            the briefing hall.".
          type: string
          maxLength: 200
        display_in_venue_name:
          title: Display in venue name
          description: 'Prefix: "Purple – G05", Suffix: "G05 – Purple"'
          type: string
          enum:
            - '-'
            - P
            - S
        display_in_public_tooltip:
          title: Display in public tooltip
          description: >-
            Displays the description in the tooltip for the venue on public
            pages. The description, if not blank, will always show on admin
            pages.
          type: boolean
    DebateResult:
      required:
        - result
      type: object
      properties:
        url:
          title: Url
          type: string
          format: uri
          readOnly: true
        id:
          title: ID
          type: integer
          readOnly: true
        result:
          title: Result
          type: object
          properties:
            sheets:
              title: Sheets
              type: array
              items:
                type: object
                required:
                  - teams
                properties:
                  adjudicator:
                    title: Adjudicator
                    type: string
                    format: uri
                    nullable: true
                  teams:
                    title: Teams
                    type: array
                    items:
                      type: object
                      required:
                        - side
                        - team
                      properties:
                        side:
                          title: Side
                          type: string
                          enum:
                            - aff
                            - neg
                            - og
                            - oo
                            - cg
                            - co
                        points:
                          title: Points
                          type: integer
                        win:
                          title: Win
                          type: boolean
                        score:
                          title: Score
                          type: number
                        team:
                          title: Team
                          type: string
                          format: uri
                        speeches:
                          title: Speeches
                          description: Speeches must be given in speaker order.
                          type: array
                          items:
                            type: object
                            required:
                              - score
                              - speaker
                            properties:
                              ghost:
                                title: Ghost
                                description: >-
                                  If checked, this score does not count towards
                                  the speaker tab. This is typically checked
                                  for speeches where someone spoke twice to
                                  make up for an absent teammate (sometimes
                                  known as iron-person or iron-man speeches).
                                type: boolean
                              score:
                                title: Score
                                type: number
                              speaker:
                                title: Speaker
                                type: string
                                format: uri
        motion:
          title: Motion
          type: string
          format: uri
          nullable: true
        timestamp:
          title: Timestamp
          type: string
          format: date-time
          readOnly: true
        version:
          title: Version
          type: integer
          readOnly: true
        submitter_type:
          title: Submitter type
          type: string
          enum:
            - T
            - P
          readOnly: true
        confirmed:
          title: Confirmed
          type: boolean
        confirm_timestamp:
          title: Confirm timestamp
          type: string
          format: date-time
          readOnly: true
          nullable: true
        ip_address:
          title: IP address
          type: string
          format: ipv4
          readOnly: true
        discarded:
          title: Discarded
          type: boolean
        participant_submitter:
          title: Participant submitter
          description: The submitting adjudicator (if by private URL)
          type: string
          format: uri
          nullable: true
          readOnly: true
        private_url:
          title: Private URL
          description: >-
            Whether the ballot was submitted through the participant's
            private URL.
          type: boolean
          readOnly: true
        single_adj:
          title: Single adjudicator
          description: >-
            If the ballot only has the scores of one adjudicator,
            rather than from all.
          type: boolean
          readOnly: true
        submitter:
          title: Submitter
          type: integer
          nullable: true
          readOnly: true
        confirmer:
          title: Confirmer
          type: integer
          nullable: true
          readOnly: true
    BreakingTeam:
      required:
        - team
        - rank
      type: object
      properties:
        team:
          title: Team
          type: string
          format: uri
        rank:
          title: Rank
          type: integer
        break_rank:
          title: Break rank
          type: integer
        remark:
          title: Remark
          type: string
          nullable: true
          enum:
            - C
            - I
            - D
            - d
            - t
            - w
            - null
